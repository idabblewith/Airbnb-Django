1. Setup
    Create folder && cd in
    Create venv
    Activate venv
    Install poetry
    Poetry init
    poetry add django
    poetry shell (optionally)
    django-admin

    django-admin startproject config .

-------------------------------------------------------------------------

2-3. OOP & Django Basics
    py manage.py runserver
        sb.sqlite3 created
        nav to http://127.0.0.1:8000//admin
        close 
    py manage.py migrate && py manage.py runserver
    py manage.py createsuperuser
    config > settings.py > change timezone and language of server 

-------------------------------------------------------------------------

4. Django Apps
    py manage.py startapp houses
    houses > models > Create house models
    config > settings > 
        installed_apps = system_apps + custom_apps
        add houses app to custom apps ("houses.apps.HousesConfig")
    houses > admin > 
        from .models import House
        @admin.register(House)
        class HouseAdmin(admin.ModelAdmin):
            pass
    killserver & py manage.py makemigrations & migrate & runserver
    Add House > Save > Change __str__ of model so it no longer shows "object"
        models >
            def __str__(self):
                return self.name
    admin >
        list_display = ["name", "price_per_night", "pets_allowed",]
        list_filter = ["price_per_night", "pets_allowed",]
        search_fields = ["address__startswith",]
        
-------------------------------------------------------------------------

5. Users App
    py manage.py startapp users
    config > settings > "users.apps.UsersConfig" add 
    models > 
        from django.contrib.auth.models import AbstractUser

        class User(AbstractUser):
            pass
    config > settings > AUTH_USER_MODEL = "users.User"
    Gut db and migrations files
    py manage.py makemigrations
    py manage.py migrate
    py manage.py createsuperuser
    admin >
        from django.contrib.auth.admin import UserAdmin
        from .models import UserModel

        @admin.register(UserModel)
        class CustomUserAdmin(UserAdmin):
            pass
    overwrite AbstractUser first and last names to be non-editable
        first_name = models.CharField(
            max_length=150,
            editable=False,
        )
        last_name = models.CharField(
            max_length=150,
            editable=False,
        )
    do user model custom fields
        defaults for is_host and name so existing users dont get error
    add fieldsets/ fields to admin
        fieldsets = (
            ("Profile",
                {
                   "fields":("username","password","name","email","is_host"), 
                },
            ),
            ("Permissions",
                {
                    "fields": (
                        "is_active",
                        "is_staff",
                        "is_superuser",
                        "groups",
                        "user_permissions"
                    ),
                    "classes": ("collapse",),
                },
            ),
            ("Important Dates",
                {
                    "fields":("last_login","date_joined"),
                    "classes": ("collapse",),
                },
            ),
        )
        fields = ["email","password","name"]
    visit http://127.0.0.1:8000/admin/users/user/1/change/
    do list_display
    add foreign key of user to house as owner
        owner = models.ForeignKey(
            "users.User",
            on_delete=models.CASCADE, (SetNULL for payments - records u need to keep)
        )
    killserver gut db and migrations
    uninstall houses from settings
    delete houses app
    makemigrations migrate createsuperuser runserver
     
-------------------------------------------------------------------------

6. Models & Admin


-------------------------------------------------------------------------