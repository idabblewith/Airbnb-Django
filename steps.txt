1. Setup
    Create folder && cd in
    Create venv
    Activate venv
    Install poetry
    Poetry init
    poetry add django
    poetry shell (optionally)
    django-admin

    django-admin startproject config .

-------------------------------------------------------------------------

2-3. OOP & Django Basics
    py manage.py runserver
        sb.sqlite3 created
        nav to http://127.0.0.1:8000//admin
        close 
    py manage.py migrate && py manage.py runserver
    py manage.py createsuperuser
    config > settings.py > change timezone and language of server 

-------------------------------------------------------------------------

4. Django Apps
    py manage.py startapp houses
    houses > models > Create house models
    config > settings > 
        installed_apps = system_apps + custom_apps
        add houses app to custom apps ("houses.apps.HousesConfig")
    houses > admin > 
        from .models import House
        @admin.register(House)
        class HouseAdmin(admin.ModelAdmin):
            pass
    killserver & py manage.py makemigrations & migrate & runserver
    Add House > Save > Change __str__ of model so it no longer shows "object"
        models >
            def __str__(self):
                return self.name
    admin >
        list_display = ["name", "price_per_night", "pets_allowed",]
        list_filter = ["price_per_night", "pets_allowed",]
        search_fields = ["address__startswith",]
        
-------------------------------------------------------------------------

5. Users App
    py manage.py startapp users
    config > settings > "users.apps.UsersConfig" add 
    models > 
        from django.contrib.auth.models import AbstractUser

        class User(AbstractUser):
            pass
    config > settings > AUTH_USER_MODEL = "users.User"
    Gut db and migrations files
    py manage.py makemigrations
    py manage.py migrate
    py manage.py createsuperuser
    admin >
        from django.contrib.auth.admin import UserAdmin
        from .models import UserModel

        @admin.register(UserModel)
        class CustomUserAdmin(UserAdmin):
            pass
    overwrite AbstractUser first and last names to be non-editable
        first_name = models.CharField(
            max_length=150,
            editable=False,
        )
        last_name = models.CharField(
            max_length=150,
            editable=False,
        )
    do user model custom fields
        defaults for is_host and name so existing users dont get error
    add fieldsets/ fields to admin
        fieldsets = (
            ("Profile",
                {
                   "fields":("username","password","name","email","is_host"), 
                },
            ),
            ("Permissions",
                {
                    "fields": (
                        "is_active",
                        "is_staff",
                        "is_superuser",
                        "groups",
                        "user_permissions"
                    ),
                    "classes": ("collapse",),
                },
            ),
            ("Important Dates",
                {
                    "fields":("last_login","date_joined"),
                    "classes": ("collapse",),
                },
            ),
        )
        fields = ["email","password","name"]
    visit http://127.0.0.1:8000/admin/users/user/1/change/
    do list_display
    add foreign key of user to house as owner
        owner = models.ForeignKey(
            "users.User",
            on_delete=models.CASCADE, (SetNULL for payments - records u need to keep)
        )
    killserver gut db and migrations
    uninstall houses from settings
    delete houses app
    makemigrations migrate createsuperuser runserver
     
-------------------------------------------------------------------------

6. Models & Admin

    poetry add Pillow

    0. USER
    users.models > 
        class GenderChoices(models.TextChoices):
            MALE = ("male", "Male")
            FEMALE = ("female", "Female") 
        class LanguageChoices(models.TextChoices):
            EN = "en", "English"
            JP = "jp", "Japanese"
        class CurrencyChoices(models.TextChoices):
            AUD = "aud", "Australian Dollar"
            JPY = "jpy", "Japanese Yen"
        profile_photo = models.ImageField(blank=True)
        gender = models.CharField(max_length=10, choices=GenderChoices.choices,)
        language = models.CharField(max_length=2, choices=LangaugeChoices.choices,)
        currency = models.CharField(max_length=3, choices=CurrencyChoices.choices,)

    py manage.py makemigrations && py manage.py migrate
    py manage.py createsuperuser
    py manage.py runserver
    users.admin >
        add to profile fieldset fields
            "profile_photo",
            "gender",
            "language",
            "currency",

    1. ROOM
    py manage.py startapp rooms
    config > settings.py > "rooms.apps.RoomsConfig", <-- Customapp
    rooms > models > Define Room model

    2. MANY TO MANY
    startapp common
    settings -> "common.apps.CommonConfig",
    Define abstract model CommonModel
        class CommonModel(models.Model):
            created_at = models.DateTimeField(auto_now_add=True)
            updated_at = models.DateTimeField(auto_now=True)

            class Meta:
                abstract = True
                
    Define Amenity - 
    py manage.py makemigrations
    py manage.py migrate

    3. room > admin > Room, Amenity Admin

    4. Rooms Admin
        list_display, list_filter, readonly_fields,

    5. Experiences
        py manage.py startapp experiences
        install in settings
        define experience and perk
        py manage.py makemigrations && py manage.py migrate
        admin > Experience & Perk Admin
        Add str method to models
    
    6. Categories
        py manage.py startapp categories
        install in settings
        define categories model - name & kind
        add class Meta verbose_name_plural and str methods
        add category field to experiences & rooms models set_null on delete, nullable and blankable
        admin > CategoryAdmin

    7. Reviews 
        py manage.py startapp reviews
        install in settings
        define reviews model - user, room, experience, payload, rating
        py manage.py makemigrations && migrate
        admin > ReviewAdmin

    8. Wishlists
        py manage.py startapp wishlists
        install in settings 
        define model - 
        py manage.py makemigrations && py manage.py migrate
        admin > WishlistAdmin

    9. Bookings
        py manage.py startapp bookings
        install in settings
        define models -
        py manage.py makemigrations && py manage.py migrate
        admin

    10. Medias
        py manage.py startapp medias
        install in settings 
        define models - photo, video (use onetoone for video experience)
        py manage.py makemigrations && py manage.py migrate
        admin

    11. Direct Messages
        py manage.py startapp direct_messages
        install in settings
        define models - Room, Message
        py manage.py makemigrations && py manage.py migrate
        admin
        dm apps > dmconfig > verbose_name = "Direct Messages"



-------------------------------------------------------------------------

7. ORM

-------------------------------------------------------------------------

8. POWER ADMIN

-------------------------------------------------------------------------

9. URLS & VIEWS

-------------------------------------------------------------------------

10. DJANGO REST FRAMEWORK

-------------------------------------------------------------------------

11. REST API

-------------------------------------------------------------------------

12. USERS API

-------------------------------------------------------------------------

13. CHECKPOINT

-------------------------------------------------------------------------

14. GRAPHQL API

-------------------------------------------------------------------------

15. AUTHENTICATION

-------------------------------------------------------------------------

16. API TESTING

-------------------------------------------------------------------------

17. FRONT-END SETUP

-------------------------------------------------------------------------

18. CHAKRA UI

-------------------------------------------------------------------------

19. REACT QUERY

-------------------------------------------------------------------------

20. AUTHENTICATION

-------------------------------------------------------------------------

21. UPLOAD ROOM

-------------------------------------------------------------------------

22. CALENDAR

-------------------------------------------------------------------------

23. DEPLOYMENT

-------------------------------------------------------------------------

