1. Setup
    Create folder && cd in
    Create venv
    Activate venv
    Install poetry
    Poetry init
    poetry add django
    poetry shell (optionally)
    django-admin

    django-admin startproject config .

-------------------------------------------------------------------------

2-3. OOP & Django Basics
    py manage.py runserver
        sb.sqlite3 created
        nav to http://127.0.0.1:8000//admin
        close 
    py manage.py migrate && py manage.py runserver
    py manage.py createsuperuser
    config > settings.py > change timezone and language of server 

-------------------------------------------------------------------------

4. Django Apps
    py manage.py startapp houses
    houses > models > Create house models
    config > settings > 
        installed_apps = system_apps + custom_apps
        add houses app to custom apps ("houses.apps.HousesConfig")
    houses > admin > 
        from .models import House
        @admin.register(House)
        class HouseAdmin(admin.ModelAdmin):
            pass
    killserver & py manage.py makemigrations & migrate & runserver
    Add House > Save > Change __str__ of model so it no longer shows "object"
        models >
            def __str__(self):
                return self.name
    admin >
        list_display = ["name", "price_per_night", "pets_allowed",]
        list_filter = ["price_per_night", "pets_allowed",]
        search_fields = ["address__startswith",]
        
-------------------------------------------------------------------------

5. Users App
    py manage.py startapp users
    config > settings > "users.apps.UsersConfig" add 
    models > 
        from django.contrib.auth.models import AbstractUser

        class User(AbstractUser):
            pass
    config > settings > AUTH_USER_MODEL = "users.User"
    Gut db and migrations files
    py manage.py makemigrations
    py manage.py migrate
    py manage.py createsuperuser
    admin >
        from django.contrib.auth.admin import UserAdmin
        from .models import UserModel

        @admin.register(UserModel)
        class CustomUserAdmin(UserAdmin):
            pass
    overwrite AbstractUser first and last names to be non-editable
        first_name = models.CharField(
            max_length=150,
            editable=False,
        )
        last_name = models.CharField(
            max_length=150,
            editable=False,
        )
    do user model custom fields
        defaults for is_host and name so existing users dont get error
    add fieldsets/ fields to admin
        fieldsets = (
            ("Profile",
                {
                   "fields":("username","password","name","email","is_host"), 
                },
            ),
            ("Permissions",
                {
                    "fields": (
                        "is_active",
                        "is_staff",
                        "is_superuser",
                        "groups",
                        "user_permissions"
                    ),
                    "classes": ("collapse",),
                },
            ),
            ("Important Dates",
                {
                    "fields":("last_login","date_joined"),
                    "classes": ("collapse",),
                },
            ),
        )
        fields = ["email","password","name"]
    visit http://127.0.0.1:8000/admin/users/user/1/change/
    do list_display
    add foreign key of user to house as owner
        owner = models.ForeignKey(
            "users.User",
            on_delete=models.CASCADE, (SetNULL for payments - records u need to keep)
        )
    killserver gut db and migrations
    uninstall houses from settings
    delete houses app
    makemigrations migrate createsuperuser runserver
     
-------------------------------------------------------------------------

6. Models & Admin

    poetry add Pillow

    0. USER
    users.models > 
        class GenderChoices(models.TextChoices):
            MALE = ("male", "Male")
            FEMALE = ("female", "Female") 
        class LanguageChoices(models.TextChoices):
            EN = "en", "English"
            JP = "jp", "Japanese"
        class CurrencyChoices(models.TextChoices):
            AUD = "aud", "Australian Dollar"
            JPY = "jpy", "Japanese Yen"
        profile_photo = models.ImageField(blank=True)
        gender = models.CharField(max_length=10, choices=GenderChoices.choices,)
        language = models.CharField(max_length=2, choices=LangaugeChoices.choices,)
        currency = models.CharField(max_length=3, choices=CurrencyChoices.choices,)

    py manage.py makemigrations && py manage.py migrate
    py manage.py createsuperuser
    py manage.py runserver
    users.admin >
        add to profile fieldset fields
            "profile_photo",
            "gender",
            "language",
            "currency",

    1. ROOM
    py manage.py startapp rooms
    config > settings.py > "rooms.apps.RoomsConfig", <-- Customapp
    rooms > models > Define Room model

    2. MANY TO MANY
    startapp common
    settings -> "common.apps.CommonConfig",
    Define abstract model CommonModel
        class CommonModel(models.Model):
            created_at = models.DateTimeField(auto_now_add=True)
            updated_at = models.DateTimeField(auto_now=True)

            class Meta:
                abstract = True
                
    Define Amenity - 
    py manage.py makemigrations
    py manage.py migrate

    3. room > admin > Room, Amenity Admin

    4. Rooms Admin
        list_display, list_filter, readonly_fields,

    5. Experiences
        py manage.py startapp experiences
        install in settings
        define experience and perk
        py manage.py makemigrations && py manage.py migrate
        admin > Experience & Perk Admin
        Add str method to models
    
    6. Categories
        py manage.py startapp categories
        install in settings
        define categories model - name & kind
        add class Meta verbose_name_plural and str methods
        add category field to experiences & rooms models set_null on delete, nullable and blankable
        admin > CategoryAdmin

    7. Reviews 
        py manage.py startapp reviews
        install in settings
        define reviews model - user, room, experience, payload, rating
        py manage.py makemigrations && migrate
        admin > ReviewAdmin

    8. Wishlists
        py manage.py startapp wishlists
        install in settings 
        define model - 
        py manage.py makemigrations && py manage.py migrate
        admin > WishlistAdmin

    9. Bookings
        py manage.py startapp bookings
        install in settings
        define models -
        py manage.py makemigrations && py manage.py migrate
        admin

    10. Medias
        py manage.py startapp medias
        install in settings 
        define models - photo, video (use onetoone for video experience)
        py manage.py makemigrations && py manage.py migrate
        admin

    11. Direct Messages
        py manage.py startapp direct_messages
        install in settings
        define models - Room, Message
        py manage.py makemigrations && py manage.py migrate
        admin
        dm apps > dmconfig > verbose_name = "Direct Messages"



-------------------------------------------------------------------------

7. ORM

    1. Intro
        py manage.py shell (python interactive console with apps installed)

        READ
        a = Room.objects.get(name="")
        print(a.pk) 
        print(a.owner.email) etc

        UPDATE
        a.price = 20
        a.save()

    2. filter, get, create, delete
        Room.objects.all()
        Room.objects.get(var=value) get a single record
        Room.objects.filter(pets_allowed=True)
        Room.objects.filter(price__gt=15) 
            search greater or  less than or gt or equals/lt or equals gte lte
            or name__startswith="Apt"

        data = {
            name = "Amenity from console",

        }
        am = Amenity.objects.create(data)

        to_delete = Amenity.objects.get(pk=7)
        to_delete.delete()

    3. QuerySets
        Room.objects.filter(pets_allowed=True).exclude(price__lte=15).filter(name__contains="poo")
        or
        Room.objects.filter(pets_allowed=True, name__contains="poo", price__gt=15)
        .count()
        .all()[:5]

    4. Admin methods
        __exact __iexact="beatles blog"
        __contains="bob" icontains
        __startswith __istartswith
        __endswith __iendswith
        __range
        __date
        __year __month time, hour
        .exists()

        add "total_amenities" to admin for room &
            add to model def
                def total_amenities(self):
                    return self.amenities.count()
            or
            add to admin panel
                def total_amenities(self, room):
                    return room.amenities.count()

    5. ForeignKey Filter & Reverse Accessors

        Room.objects.filter(owner__username='tg')
            owner__username__startswith etc.
        or
        (recommended out of two)
        me = User.objects.get(pk=1)
        me.room_set.all()
        
    6. Related Name related_name

        Customise the name of reverse accessors

        simply add 'related_name="[NAME OF MODEL]"' to each model with a foreign key
        for room:
            owner = models.ForeignKey(
                "users.User",
                on_delete=models.CASCADE,
                related_name="rooms',
            )
        
        now you can call the rooms for each user from the user model:
            user.rooms.all()

        change rooms, wishlists, reviews, medias, bookings, direct_messages, experiences models to add related_name
            & migrate

        SAME AS backref in flask

    
-------------------------------------------------------------------------

8. POWER ADMIN

    1. Methods
        rooms > models > 
            def rating(self):
                count = self.reviews.count()
                if count == 0:
                    return "No reviews"
                else:
                    total_rating = 0
                    for review in self.reviews.all().values("rating"):   <---------OPTOMISATION RETURN ONLY CERTAIN VALUES with .values("var")
                        total_rating += review["rating"]
                    return round(total_rating / count, 2)

        rooms > admin >
            "reviews" in list_display
        
    2. Search fields
        rooms > admin >
            search_fields = [
                "^name",
                "=price",
                "owner__username",
            ]

        ^ = startswith
        = = exact
        __var = search on foreignkey


    3. Admin actions
        rooms > admin >
         at top:
            @admin.action(description="Set all prices to zero")
            def reset_prices(model_admin, request, queryset):
                for room in rooms.all():
                    room.price = 0
                    room.save()

            
         add to roomadmin:
            actions = [
                reset_prices,
            ]


    4. Custom Filters
        Ordering of filters matters

        reviews > admin >
            class WordFilter(admin.SimpleListFilter):
                title = "Filter by Words"
                parameter_name = "potato"

                def lookups(self, request, model_admin):
                    return [
                        ("good", "Good"),
                        ("great", "Great"),
                        ("awesome", "Awesome")
                    ]

                def queryset(self, request, queryset):
                    return queryset
                    # replace queryset with reviews in this case

            list_filter = [
                WordFilter,
                "rating",
                "user__is_host",
                "room__category",
                "room__pets_allowed",
            ]

-------------------------------------------------------------------------

9. URLS & VIEWS

    1. Views

        rooms > views >
            from django.http import HttpResponse

            def say_hello(req):
                return HttpResponse("hello")
        config > urls >
            from rooms import views as room_views

            urlpatterns = [
                path("rooms", room_views.say_hello)
            ]

    2. Include 

        create urls.py for each app and import them in the config

        config urls >
            from django.contrib import admin
            from django.urls import path, include


            urlpatterns = [
                path("admin/", admin.site.urls),
                path("rooms/", include("rooms.urls")),
            ]

        rooms urls >

            from . import views
            from django.urls import path

            urlpatterns = [
                path("", views.say_hello),
            ]


    3. URL Arguments

        rooms > views > 
            from django.shortcuts import render
            from django.http import HttpResponse


            def see_one_room(req, room_id):
                return HttpResponse(f"{room_id}")


            def see_all_rooms(req):
                return HttpResponse("All rooms")

        rooms > urls >
            from . import views
            from django.urls import path

            urlpatterns = [
                path("", views.see_all_rooms),
                path("<int:room_id>", views.see_one_room),
            ]


    4. render
        NOT RECOMMENDED (FLASK/JINJA STYLE) - WILL USE REACT
        in views 
            return render(req, "all_rooms.html", {
                "rooms": all_rooms
            })
    
        create rooms > templates/all_rooms.html

    5. Django Templates
        in html Templates >
            {{var}}

        {% for room in rooms %}
            <li>{{room.name}}
                <a href="/rooms/{{room.pk}}>
                    <br />
                    {% for amenity in rooms.amenities %}
                        <span>{{amenity.name}}</span>
                    {% endfor %}
                />
            </li>
        {% endfor %}

    6. DoesNotExist

        rooms > views >
            try:
                room = Room.objects.get(pk=room_id)
                return HttpResponse(f"{room}")
            except Room.DoesNotExist:
                return render(req, "404.html")

    7. Django v. React

        NO MORE TEMPLATES :D
        React for frontend

-------------------------------------------------------------------------

10. DJANGO REST FRAMEWORK

-------------------------------------------------------------------------

11. REST API

-------------------------------------------------------------------------

12. USERS API

-------------------------------------------------------------------------

13. CHECKPOINT

-------------------------------------------------------------------------

14. GRAPHQL API

-------------------------------------------------------------------------

15. AUTHENTICATION

-------------------------------------------------------------------------

16. API TESTING

-------------------------------------------------------------------------

17. FRONT-END SETUP

-------------------------------------------------------------------------

18. CHAKRA UI

-------------------------------------------------------------------------

19. REACT QUERY

-------------------------------------------------------------------------

20. AUTHENTICATION

-------------------------------------------------------------------------

21. UPLOAD ROOM

-------------------------------------------------------------------------

22. CALENDAR

-------------------------------------------------------------------------

23. DEPLOYMENT

-------------------------------------------------------------------------

